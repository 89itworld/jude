<?php
namespace App\Controller;
use Cake\Core\Configure;
use Cake\ORM\TableRegistry;
use Cake\I18n\Time;
use Cake\I18n\I18n;
use Cake\Network\Http\Client;     //'HttpSocket', 'Network/Http');
use Cake\Network\Http\Request;

/**
 * Created by 89ITWORLD.
 * User: Ankur Chauhan
 * Date: 28-01-2016
 * Time: 12:55
 * To change this template use File | Settings | File Templates.
 */

class FlightsController extends AppController
{
    public  function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->Auth->allow(['multiCity','index','filter','listView','flightDetails','saveBooking','confirmPyment','zoozPaymentToken','zoozAddPayment','getFlightSearchData','roundTrip']);
    }
    function generateRandomString($length = 10) {
        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }
        return $randomString;
    }

    function getFlightSearchData()
    {
        $this->autoRender = false;
        $way_type = $this->request->data['way_type'];
        if ($way_type == "ui-id-1") {
            $this->render('/Element/searching/flight');
        }
        if ($way_type == "ui-id-8") {
            $this->render('/Element/searching/r-trip');
        }
        if ($way_type == "ui-id-9") {
            $this->render('/Element/searching/multi_city');
        }
        if ($way_type == "ui-id-2") {
            $this->render('/Element/searching/hotel');
        }
        if ($way_type == "ui-id-3") {
            $this->render('/Element/searching/bundle');
        }
        if ($way_type == "ui-id-4") {
            $this->render('/Element/searching/tours');
        }
        if ($way_type == "ui-id-5") {
            $this->render('/Element/searching/car');
        }
        if ($way_type == "ui-id-6") {
            $this->render('/Element/searching/train');
        }
        if ($way_type == "ui-id-7") {
            $this->render('/Element/searching/cruise');
        }
    }
    public function multiCity()
        {
            $session = $this->request->session();
            if($this->request->is(['post'])){
                $http = new Client();
                $data=["requests"=> [
                ["to"=> "MIA", "flyFrom"=> "HNL", "directFlights"=> 0, "dateFrom"=> "25/07/2019", "dateTo"=> "28/07/2019"],
                ["to"=> "HNL", "flyFrom"=>"MIA", "directFlights"=> 0, "dateFrom"=> "01/08/2019", "dateTo"=> "11/08/2019"]
                ]];
                $request = [
                    'header' => [
                        'Content-Type' => 'application/json',
                    ],
                ];
                $response = $http->post('https://api.skypicker.com/flights_multi?partner=picky&locale=en&curr=USD',json_encode($data),$request);
                pr(json_decode($response->body()));die;

                $userid = $this->generateRandomString(18);
                $session->write('flight_userid', $userid);
                $flightPricesTable = TableRegistry::get('FlightPrices');
                $flightStopsTable = TableRegistry::get('FlightStops');
                $type='oneway';
                if($this->request['travel_way']== 'O'){
                 $type='oneway';
                }
                $url_link = 'https://api.skypicker.com/flights?';
                $url_link .= 'flyFrom='.$this->request->data['departureAirport'];
               // $url_link .= 'flyFrom='.$this->request->data['source'];
                $url_link .= '&to='.$this->request->data['arrivalAirport'];
                //$url_link .= '&to='.$this->request->data['destination'];
                $url_link .= '&dateFrom='.date("d/m/Y", strtotime($this->request->data['depart_on']));
                $url_link .= '&dateTo='.date("d/m/Y", strtotime($this->request->data['depart_on']));
                $url_link .= '&returnFrom='.date("d/m/Y", strtotime($this->request->data['returnDate']));
                $url_link .= '&returnTo='.date("d/m/Y", strtotime($this->request->data['returnDate']));
                $url_link .= '&typeFlight='.$type.'&sort=price&locale=en';/*.I18n::locale();*/
                $url_link .= '&adults='.$this->request->data['adults'];
               $passengers=$this->request->data['adults'];
                if($this->request->data['kids']){
                    $url_link .= '&children='.$this->request->data['kids'];
                    $passengers=$passengers+$this->request->data['kids'];
                }
                /*if($this->request->data['infants']){
                    $url_link .= '&infants='.$this->request->data['infants'];
                    $passengers=$passengers+$this->request->data['infants'];
                }*/
                $url_link .= '&passengers='.$passengers;
              // $url_link .= '&apikey=AbzP0JEDOkTmXeMYiMZkwq5PEsCJTigo';
                $url_link .='&partner=picky&curr=USD&limit=30';
                $dataFromApi = file_get_contents($url_link);
                $dataArray=json_decode($dataFromApi,true);
                     //pr($dataArray); die;
               // $dataFromApi = file_get_contents($url_link);
               // $dataArray=json_decode($dataFromApi,true);
                if(@sizeof($dataArray['data'])>0){


                    $meta_data["kids"]=$this->request->data['kids'];
                           $meta_data["adults"]=$this->request->data['adults'];
                           $this->set('meta_data',$meta_data);
                           $this->set('flights_data',$this->paginate($this->Flights->find()->contain(['FlightPrices','FlightStops'])->where(['userId'=>$session->read('flight_userid')])));

                   // return $this->redirect(['controller'=>'flights','action'=>'index']);
                }
                else{
                    $this->set('flights_data','error');
                }
            }
            $this->set('flights_data',$this->paginate($this->Flights->find()->contain(['FlightPrices','FlightStops'])->where(['userId'=>$session->read('flight_userid')])));
           //$this->set('flights_data', $this->paginate($this->Flights->find()->contain(['FlightPrices','FlightStops'])->where(['userId'=>'18240'])));
    //        $this->set('flights_data', $this->paginate($this->Flights->find()->where(['userId'=>'123'])->contain(['FlightPrices','FlightStops'=>function($q){
    //            return $q->where(['FlightStops.airline_name'=>'United']);
    //             }
    //        ])));
        }
     public function index()
    {
        $session = $this->request->session();
     // pr($this->request);die;
        if($this->request->is(['post'])){
            $session_id = $this->generateRandomString(18);
            $session->write('flight_userid', $session_id);
            $flightPricesTable = TableRegistry::get('FlightPrices');
            $flightStopsTable = TableRegistry::get('FlightStops');
            $this->loadModel('FlightPrices');
            $url_link = 'https://api.skypicker.com/flights?';
           // $type='oneway';
            $url_link .= 'flyFrom='.$this->request->data['departureAirport'];
           // $url_link .= 'flyFrom='.$this->request->data['source'];
            $url_link .= '&to='.$this->request->data['arrivalAirport'];
            //$url_link .= '&to='.$this->request->data['destination'];
            $url_link .= '&dateFrom='.date("d/m/Y", strtotime($this->request->data['depart_on']));
            $url_link .= '&dateTo='.date("d/m/Y", strtotime($this->request->data['depart_on']));
            $type='oneway';
            $url_link .= '&typeFlight='.$type.'&sort=price&locale=en';/*.I18n::locale();*/
            $url_link .= '&adults='.$this->request->data['adults'];
           $passengers=$this->request->data['adults'];
            if(@$this->request->data['kids']){
                $url_link .= '&children='.$this->request->data['kids'];
                $passengers=$passengers+$this->request->data['kids'];
            }
            if(@$this->request->data['infants']){
                $url_link .= '&infants='.$this->request->data['infants'];
                $passengers=$passengers+$this->request->data['infants'];
            }
            $url_link .= '&passengers='.$passengers;
            //$url_link .= '&apikey=AbzP0JEDOkTmXeMYiMZkwq5PEsCJTigo';
            $url_link .='&partner=picky&curr=USD&limit=50&maxstopovers=3';
            $dataFromApi = file_get_contents($url_link);
            $dataArray=json_decode($dataFromApi,true);
                // pr($dataArray); die;
           // $dataFromApi = file_get_contents($url_link);
           // $dataArray=json_decode($dataFromApi,true);
            if(@sizeof($dataArray['data'])>0){
               /* $flights=$dataArray['legs'];
                $offers=$dataArray['offers'];
                foreach ($flights as $flight) {
                    $p[$flight['legId']]['flight']=$flight;
                }
                foreach ($offers as $offer) {
                    $p[$offer['legIds']['0']]['offer']=$offer;
                }*/

                foreach($dataArray['data'] as $flight){
                    $flights = $this->Flights->newEntity();
                  //  $n= sizeof($flight['flight']['segments'])-1;
                    $flightsData['expedia_legId'] = $flight['id'];
                    $flightsData['departure_time'] =  new Time($flight['dTime']);
                    $flightsData['departure_location'] = $flight['cityFrom'];
                    $flightsData['departure_code'] = $flight['flyFrom'];
                    $flightsData['seats_remaining'] = $flight['facilitated_booking_available'];
                    $flightsData['arrival_time'] = new Time($flight['aTime']);
                    $flightsData['arrival_location'] = $flight['cityTo'];
                    $flightsData['arrival_code'] = $flight['flyTo'];
                    $flightsData['stops'] = sizeof($flight['route']);
                    $flightsData['fly_duration'] = $flight['fly_duration'];
                    $flightsData['deep_link'] = $flight['deep_link'];
                    $flightsData['kids'] = $this->request->data['kids'];
                    $flightsData['adults'] =$this->request->data['adults'];
                    $flightsData['beg1'] =@$flight['bags_price'][1];
                    $flightsData['beg2'] =@$flight['bags_price'][2];
                    $flightsData['beg3'] =@$flight['bags_price'][3];
                   // $flightsData['deep_link'] =str_replace("&price","&affilid=judefly&price",$flight['deep_link']);

                    $flightsData['booking_token'] = $flight['booking_token'];
                    $flightsData['session_id'] = $session_id;

                    $flights = $this->Flights->patchEntity($flights,$flightsData,['validate'=>false]);
//                    debug($flights);
                    if($this->Flights->save($flights)){
                        $flight_id= $flights['id'];
                        foreach($flight['route'] as $flight_stops){
                            $flightsStops = $flightStopsTable->newEntity();
                            $flightStop['flight_id']= $flight_id;
                            $flightStop['session_id']= $session_id;
                            $flightStop['departure_time']= new Time($flight_stops['dTimeUTC']);
                            $flightStop['arrival_time']= new Time($flight_stops['aTimeUTC']);
                            $diff  = $flight_stops['aTimeUTC'] - $flight_stops['dTimeUTC'];
                            $hours = floor($diff / (60 * 60));
                            $minutes = $diff - $hours * (60 * 60);
                            $flightStop['duration']=$hours."h ".floor( $minutes / 60 )."m" ;
                            $flightStop['arrival_code']= $flight_stops['flyTo'];
                            $flightStop['arrival_location']= $flight_stops['cityTo'];
                            $flightStop['departure_code']= $flight_stops['flyFrom'];
                            $flightStop['departure_location']= $flight_stops['cityFrom'];
                            $flightStop['airline_name']= $flight_stops['airline'];
                            $flightStop['airline_code']= $flight_stops['airline'];
                            $flightStop['flightNumber']= $flight_stops['flight_no'];
                            $flightStop['operating_airline']= @$flight_stops['airline'];
                            $flightStop['return_flight']= @$flight_stops['return'];
                           // $flightStop['distance']= $flight_stops['distance'];
                           // $flightStop['distance_units']= $flight_stops['distanceUnits'];

                            $flightsStops = $flightStopsTable->patchEntity($flightsStops, $flightStop,['validate'=>false]);
//                        debug($flightsStops);
                            $flightStopsTable->save($flightsStops);
                        }
                        $flightPrices = $flightPricesTable->newEntity();
                        $flightPrice['flight_id']= $flight_id;
                        $flightPrice['session_id']= $session_id;
                       // $flightPrice['flight_legId']= $flight['flight']['legId'];
                       //$flightPrice['base_price']= $flight['price'];
                        //$flightPrice['formatted_base_price']= $flight['price'];
                        $flightPrice['total_price']= $flight['price'];
                       // $flightPrice['formatted_total_price']= $flight['price'];
                       // $flightPrice['taxes_price']=$flight['price'];
                        $flightPrices = $flightPricesTable->patchEntity($flightPrices,$flightPrice,['validate'=>false]);
//                    debug($flightPrices);
                        $flightPricesTable->save($flightPrices);
                    }
                }
                $meta_data["kids"]=$this->request->data['kids'];
                       $meta_data["adults"]=$this->request->data['adults'];
                       $this->set('meta_data',$meta_data);

                     // $this->set('min_max_amount',$this->FlightPrices->find('all')->max('total_price')->where(['session_id'=>$session->read('flight_userid')]));
                       $this->set('flights_data',$this->paginate($this->Flights->find()->contain(['FlightPrices','FlightStops'])->where(['Flights.session_id'=>$session->read('flight_userid')])));

               // return $this->redirect(['controller'=>'flights','action'=>'index']);
            }
            else{
                $this->set('flights_data','error');
            }
        }
       // $this->set('min_max_amount',$this->FlightPrices->find('all')->select(['total_price)'])->where(['session_id'=>$session->read('flight_userid')]));
       // $this->set('min_max_amount',$this->FlightPrices->find('all')->select(['maxAmount' => 'MAX(FlightPrices.total_price)','minAmount' => 'MIN(FlightPrices.total_price)'])->where(['session_id'=>$session->read('flight_userid')]));
        $this->set('flights_data',$this->paginate($this->Flights->find()->contain(['FlightPrices','FlightStops'])->where(['Flights.session_id'=>$session->read('flight_userid')])));
        //$this->set('flights_data',$this->paginate($this->Flights->find()->select(['Flights.*', 'FlightPrices.*', 'FlightStops.*','maxAmount' => 'MAX(FlightPrices.total_price)','minAmount' => 'MIN(FlightPrices.total_price)'])->contain(['FlightPrices','FlightStops'])->where(['session_id'=>$session->read('flight_userid')])));
       //$this->set('flights_data', $this->paginate($this->Flights->find()->contain(['FlightPrices','FlightStops'])->where(['userId'=>'18240'])));
//        $this->set('flights_data', $this->paginate($this->Flights->find()->where(['userId'=>'123'])->contain(['FlightPrices','FlightStops'=>function($q){
//            return $q->where(['FlightStops.airline_name'=>'United']);
//             }
//        ])));
    }

    public function roundTrip()
    {
        $session = $this->request->session();
        if ($this->request->is(['post'])) {
            $session_id = $this->generateRandomString(18);
            $session->write('flight_userid', $session_id);
            $flightPricesTable = TableRegistry::get('FlightPrices');
            $flightStopsTable = TableRegistry::get('FlightStops');
            $this->loadModel('FlightPrices');
            $url_link = 'https://api.skypicker.com/flights?';
            // $type='oneway';
            $url_link .= 'flyFrom=' . $this->request->data['departureAirport'];
            // $url_link .= 'flyFrom='.$this->request->data['source'];
            $url_link .= '&to=' . $this->request->data['arrivalAirport'];
            //$url_link .= '&to='.$this->request->data['destination'];
            $url_link .= '&dateFrom=' . date("d/m/Y", strtotime($this->request->data['depart_on']));
            $url_link .= '&dateTo=' . date("d/m/Y", strtotime($this->request->data['depart_on']));
            $type = 'round';
            $url_link .= '&returnFrom=' . date("d/m/Y", strtotime($this->request->data['returnDate']));
            $url_link .= '&returnTo=' . date("d/m/Y", strtotime($this->request->data['returnDate']));
            $url_link .= '&typeFlight=' . $type . '&sort=price&locale=en';/*.I18n::locale();*/
            $url_link .= '&adults=' . $this->request->data['adults'];
            $passengers = $this->request->data['adults'];
            if (@$this->request->data['kids']) {
                $url_link .= '&children=' . $this->request->data['kids'];
                $passengers = $passengers + $this->request->data['kids'];
            }
            if (@$this->request->data['infants']) {
                $url_link .= '&infants=' . $this->request->data['infants'];
                $passengers = $passengers + $this->request->data['infants'];
            }
            $url_link .= '&passengers=' . $passengers;
            //$url_link .= '&apikey=AbzP0JEDOkTmXeMYiMZkwq5PEsCJTigo';
            $url_link .= '&partner=picky&curr=USD&limit=50&maxstopovers=3';
            $dataFromApi = file_get_contents($url_link);
            $dataArray = json_decode($dataFromApi, true);
            // pr($dataArray); die;
            // $dataFromApi = file_get_contents($url_link);
            // $dataArray=json_decode($dataFromApi,true);
            if (@sizeof($dataArray['data']) > 0) {
                /* $flights=$dataArray['legs'];
                 $offers=$dataArray['offers'];
                 foreach ($flights as $flight) {
                     $p[$flight['legId']]['flight']=$flight;
                 }
                 foreach ($offers as $offer) {
                     $p[$offer['legIds']['0']]['offer']=$offer;
                 }*/

                foreach ($dataArray['data'] as $flight) {
                    $flights = $this->Flights->newEntity();
                    //  $n= sizeof($flight['flight']['segments'])-1;
                    $flightsData['expedia_legId'] = $flight['id'];
                    $flightsData['departure_time'] = new Time($flight['dTime']);
                    $flightsData['departure_location'] = $flight['cityFrom'];
                    $flightsData['departure_code'] = $flight['flyFrom'];
                    $flightsData['seats_remaining'] = $flight['facilitated_booking_available'];
                    $flightsData['arrival_time'] = new Time($flight['aTime']);
                    $flightsData['arrival_location'] = $flight['cityTo'];
                    $flightsData['arrival_code'] = $flight['flyTo'];
                    $flightsData['stops'] = sizeof($flight['route']);
                    $flightsData['fly_duration'] = $flight['fly_duration'];
                    $flightsData['deep_link'] = $flight['deep_link'];
                    $flightsData['kids'] = $this->request->data['kids'];
                    $flightsData['adults'] = $this->request->data['adults'];
                    $flightsData['beg1'] = @$flight['bags_price'][1];
                    $flightsData['beg2'] = @$flight['bags_price'][2];
                    $flightsData['beg3'] = @$flight['bags_price'][3];
                    // $flightsData['deep_link'] =str_replace("&price","&affilid=judefly&price",$flight['deep_link']);

                    $flightsData['booking_token'] = $flight['booking_token'];
                    $flightsData['session_id'] = $session_id;

                    $flights = $this->Flights->patchEntity($flights, $flightsData, ['validate' => false]);
                    //                    debug($flights);
                    if ($this->Flights->save($flights)) {
                        $flight_id = $flights['id'];
                        foreach ($flight['route'] as $flight_stops) {
                            $flightsStops = $flightStopsTable->newEntity();
                            $flightStop['flight_id'] = $flight_id;
                            $flightStop['session_id'] = $session_id;
                            $flightStop['departure_time'] = new Time($flight_stops['dTimeUTC']);
                            $flightStop['arrival_time'] = new Time($flight_stops['aTimeUTC']);
                            $diff = $flight_stops['aTimeUTC'] - $flight_stops['dTimeUTC'];
                            $hours = floor($diff / (60 * 60));
                            $minutes = $diff - $hours * (60 * 60);
                            $flightStop['duration'] = $hours . "h " . floor($minutes / 60) . "m";
                            $flightStop['arrival_code'] = $flight_stops['flyTo'];
                            $flightStop['arrival_location'] = $flight_stops['cityTo'];
                            $flightStop['departure_code'] = $flight_stops['flyFrom'];
                            $flightStop['departure_location'] = $flight_stops['cityFrom'];
                            $flightStop['airline_name'] = $flight_stops['airline'];
                            $flightStop['airline_code'] = $flight_stops['airline'];
                            $flightStop['flightNumber'] = $flight_stops['flight_no'];
                            $flightStop['operating_airline'] = @$flight_stops['airline'];
                            $flightStop['return_flight'] = @$flight_stops['return'];
                            // $flightStop['distance']= $flight_stops['distance'];
                            // $flightStop['distance_units']= $flight_stops['distanceUnits'];

                            $flightsStops = $flightStopsTable->patchEntity($flightsStops, $flightStop, ['validate' => false]);
                            //                        debug($flightsStops);
                            $flightStopsTable->save($flightsStops);
                        }
                        $flightPrices = $flightPricesTable->newEntity();
                        $flightPrice['flight_id'] = $flight_id;
                        $flightPrice['session_id'] = $session_id;
                        // $flightPrice['flight_legId']= $flight['flight']['legId'];
                        //$flightPrice['base_price']= $flight['price'];
                        //$flightPrice['formatted_base_price']= $flight['price'];
                        $flightPrice['total_price'] = $flight['price'];
                        // $flightPrice['formatted_total_price']= $flight['price'];
                        // $flightPrice['taxes_price']=$flight['price'];
                        $flightPrices = $flightPricesTable->patchEntity($flightPrices, $flightPrice, ['validate' => false]);
                        //                    debug($flightPrices);
                        $flightPricesTable->save($flightPrices);
                    }
                }
                $meta_data["kids"] = $this->request->data['kids'];
                $meta_data["adults"] = $this->request->data['adults'];
                $this->set('meta_data', $meta_data);

                // $this->set('min_max_amount',$this->FlightPrices->find('all')->max('total_price')->where(['session_id'=>$session->read('flight_userid')]));
                $this->set('flights_data', $this->paginate($this->Flights->find()->contain(['FlightPrices', 'FlightStops'])->where(['Flights.session_id' => $session->read('flight_userid')])));

                // return $this->redirect(['controller'=>'flights','action'=>'index']);
            } else {
                $this->set('flights_data', 'error');
            }
        }
        // $this->set('min_max_amount',$this->FlightPrices->find('all')->select(['total_price)'])->where(['session_id'=>$session->read('flight_userid')]));
        // $this->set('min_max_amount',$this->FlightPrices->find('all')->select(['maxAmount' => 'MAX(FlightPrices.total_price)','minAmount' => 'MIN(FlightPrices.total_price)'])->where(['session_id'=>$session->read('flight_userid')]));
        $this->set('flights_data', $this->paginate($this->Flights->find()->contain(['FlightPrices', 'FlightStops'])->where(['Flights.session_id' => $session->read('flight_userid')])));
        //$this->set('flights_data',$this->paginate($this->Flights->find()->select(['Flights.*', 'FlightPrices.*', 'FlightStops.*','maxAmount' => 'MAX(FlightPrices.total_price)','minAmount' => 'MIN(FlightPrices.total_price)'])->contain(['FlightPrices','FlightStops'])->where(['session_id'=>$session->read('flight_userid')])));
        //$this->set('flights_data', $this->paginate($this->Flights->find()->contain(['FlightPrices','FlightStops'])->where(['userId'=>'18240'])));
        //        $this->set('flights_data', $this->paginate($this->Flights->find()->where(['userId'=>'123'])->contain(['FlightPrices','FlightStops'=>function($q){
        //            return $q->where(['FlightStops.airline_name'=>'United']);
        //             }
        //        ])));
    }
    /**
     * flights home page
     */
    public function indexold()
    {
        $session = $this->request->session();
        if($this->request->is(['post'])){
            $userid = rand();
            $session->write('flight_userid', $userid);
            $flightPricesTable = TableRegistry::get('FlightPrices');
            $flightStopsTable = TableRegistry::get('FlightStops');

//            $this->Flights->deleteAll(array('1 = 1'));
//            $flightPricesTable->deleteAll(array('1 = 1'));
//            $flightStopsTable->deleteAll(array('1 = 1'));

            $url_link = 'http://terminal2.expedia.com/x/mflights/search?';
            $url_link .= 'departureAirport='.$this->request->data['departureAirport'];
            $url_link .= '&arrivalAirport='.$this->request->data['arrivalAirport'];
            $url_link .= '&departureDate='.$this->request->data['depart_on'];
            if($this->request->data['kids']){
                $url_link .= '&childTravelerAge='.$this->request->data['kids'];
            }
            if($this->request->data['adults']){
                $url_link .= '&numberOfAdultTravelers='.$this->request->data['adults'];
            }
           // $url_link .= '&apikey=AbzP0JEDOkTmXeMYiMZkwq5PEsCJTigo';

            $dataFromApi = file_get_contents($url_link);
            $dataArray=json_decode($dataFromApi,true);
//            pr($dataArray); die;
            if(@$dataArray['legs']){
                $flights=$dataArray['legs'];
                $offers=$dataArray['offers'];
                foreach ($flights as $flight) {
                    $p[$flight['legId']]['flight']=$flight;
                }
                foreach ($offers as $offer) {
                    $p[$offer['legIds']['0']]['offer']=$offer;
                }

                foreach($p as $flight){
                    $flights = $this->Flights->newEntity();
                    $n= sizeof($flight['flight']['segments'])-1;
                    $flightsData['expedia_legId'] = $flight['flight']['legId'];
                    $flightsData['departure_time'] =  new Time($flight['flight']['segments']['0']['departureTimeRaw']);
                    $flightsData['departure_location'] = $flight['flight']['segments'][0]['departureAirportLocation'];
                    $flightsData['departure_code'] = $flight['flight']['segments'][0]['departureAirportCode'];
                    $flightsData['seats_remaining'] = $flight['offer']['seatsRemaining'];
                    $flightsData['arrival_time'] = new Time($flight['flight']['segments'][$n]['arrivalTimeRaw']);
                    $flightsData['arrival_location'] = $flight['flight']['segments'][$n]['arrivalAirportLocation'];
                    $flightsData['arrival_code'] = $flight['flight']['segments'][$n]['arrivalAirportCode'];
                    $flightsData['stops'] = sizeof($flight['flight']['segments']);
                    $flightsData['userId'] = $userid;

                    $flights = $this->Flights->patchEntity($flights,$flightsData,['validate'=>false]);
//                    debug($flights);
                    if($this->Flights->save($flights)){
                        $flight_id= $flights['id'];
                        foreach($flight['flight']['segments'] as $flight_stops){
                            $flightsStops = $flightStopsTable->newEntity();
                            $flightStop['flight_id']= $flight_id;
                            $flightStop['departure_time']= new Time($flight_stops['departureTimeRaw']);
                            $flightStop['arrival_time']= new Time($flight_stops['arrivalTimeRaw']);
                            $flightStop['arrival_code']= $flight_stops['arrivalAirportCode'];
                            $flightStop['arrival_location']= $flight_stops['arrivalAirportLocation'];
                            $flightStop['departure_code']= $flight_stops['departureAirportCode'];
                            $flightStop['departure_location']= $flight_stops['departureAirportLocation'];
                            $flightStop['airline_name']= $flight_stops['airlineName'];
                            $flightStop['airline_code']= $flight_stops['airlineCode'];
                            $flightStop['flightNumber']= $flight_stops['flightNumber'];
                            $flightStop['operating_airline']= @$flight_stops['operatingAirlineName'];
                            $flightStop['distance']= $flight_stops['distance'];
                            $flightStop['distance_units']= $flight_stops['distanceUnits'];

                            $flightsStops = $flightStopsTable->patchEntity($flightsStops, $flightStop,['validate'=>false]);
//                        debug($flightsStops);
                            $flightStopsTable->save($flightsStops);
                        }
                        $flightPrices = $flightPricesTable->newEntity();
                        $flightPrice['flight_id']= $flight_id;
                        $flightPrice['flight_legId']= $flight['flight']['legId'];
                        $flightPrice['base_price']= $flight['offer']['baseFarePrice']['amount'];
                        $flightPrice['formatted_base_price']= $flight['offer']['baseFarePrice']['formattedWholePrice'];
                        $flightPrice['total_price']= $flight['offer']['totalFarePrice']['amount'];
                        $flightPrice['formatted_total_price']= $flight['offer']['totalFarePrice']['formattedWholePrice'];
                        $flightPrice['taxes_price']=$flight['offer']['pricePerPassengerCategory'][0]['taxesPrice']['amount'];
                        $flightPrices = $flightPricesTable->patchEntity($flightPrices,$flightPrice,['validate'=>false]);
//                    debug($flightPrices);
                        $flightPricesTable->save($flightPrices);
                    }
                }
                return $this->redirect(['controller'=>'flights','action'=>'index']);
            }else{
                $this->set('$flights_data','error');
            }
        }
        $this->set('flights_data', $this->paginate($this->Flights->find()->contain(['FlightPrices','FlightStops'])->where(['userId'=>$session->read('flight_userid')])));
//        $this->set('flights_data', $this->paginate($this->Flights->find()->where(['userId'=>'123'])->contain(['FlightPrices','FlightStops'=>function($q){
//            return $q->where(['FlightStops.airline_name'=>'United']);
//             }
//        ])));
    }

    public function filter()
    {
        $session = $this->request->session();
        $this->autoRender = false;
        $this->viewBuilder()->layout('ajax');
        $this->paginate = [
            'limit' => 50
        ];

        if ($this->request->is(['post'])) {
            $flight_stops = @$this->request->data['flight_stops'];
            $airlines = @$this->request->data['airlines'];
            $condition = ['Flights.session_id' => $session->read('flight_userid')];

            if (@$this->request->data['minPrice']) {
                $minPrice = str_replace('$', '', $this->request->data['minPrice']);
                $maxPrice = str_replace('$', '', $this->request->data['maxPrice']);

                array_push($condition, array('AND' => ['FlightPrices.total_price >=' => $minPrice]));
                array_push($condition, array('AND' => ['FlightPrices.total_price <=' => $maxPrice]));
            }
            if ($flight_stops) {
                $n = sizeof($flight_stops);
                if ($n > 1) {
                    $min = min($flight_stops);
                    $max = max($flight_stops);
                    array_push($condition, array('AND' => ['stops >=' => $min]));
                    array_push($condition, array('AND' => ['stops <=' => $max]));
                } else {
                    array_push($condition, array('AND' => ['stops' => $flight_stops[0]]));
                }
            }
            $data = $this->paginate($this->Flights->find()->contain(['FlightPrices','FlightStops'])->where($condition)->order(['FlightPrices.total_price' => 'DESC']));

            if ($airlines) {
//                pr($airlines);
                foreach($data as $airline){
                   if($airline->flight_stops[0]->airline_name == $airlines['0'] or $airline->flight_stops[0]->airline_name == @$airlines['1']){
                       $flights_data[] = $airline;
                    }
                }
            }else{
                $flights_data = $data ;
            }
            $this->set(compact('flights_data'));
            if ($this->request->is('ajax')) {
                echo $this->render('/Element/Front/flight_list');
            }
        }
        exit;
    }

   public function listView(){
       $this->viewBuilder()->layout('view_page');
       $session = $this->request->session();
       $this->set('flights_data', $this->paginate($this->Flights->find()->contain(['FlightPrices','FlightStops'])->where(['Flights.session_id'=>$session->read('flight_userid')])));

   }


    public function flightDetails($f_id=null){
             $this->viewBuilder()->layout('booking_page');
               $session = $this->request->session();
               $sessionId=$session->read('flight_userid');
              /* if(!empty($session->check('userid'))){
                   $this->redirect(['controller'=>'Homes','action'=>'index']);
               }else{*/
                  $flight_data=$this->Flights->find()->where(['id'=>$f_id/*,'userId'=>$session->read('flight_userid')*/])->first();
                  $url_link = 'https://booking-api.skypicker.com/api/v0.1/check_flights?v=2&';
                  $url_link .= 'booking_token='.$flight_data["booking_token"];
                  $url_link .= '&bnum=1&pnum='.($flight_data["adults"]+$flight_data["kids"]).'&affily=picky_en';
                  $url_link .= '&currency=USD&visitor_uniqid='.$sessionId;
                  $url_link.='&adults='.$flight_data["adults"].'&children='.$flight_data["kids"];
                   $dataFromApi = file_get_contents($url_link);
                   $dataArray=json_decode($dataFromApi,true);
                 $dataArray["db_data"]=$flight_data;
             //   pr($dataArray); die;
                 $this->set("flight_details",$dataArray);
                 //  pr($flight_data);die;
             // }

    }

    private function zoozPaymentToken($meta=null)
       {
           $curl = curl_init();
           $data = ["command" => "openPayment",
               "paymentDetails" => [
                   "amount" => $meta['amount'],
                   "currencyCode" => "USD"
               ],
               "customerDetails" => [
                   "customerLoginID" => "test",
                   "customerLoginName" => ""
               ]
           ];
           curl_setopt_array($curl, array(
                       CURLOPT_URL => "https://sandbox.zooz.com/mobile/ZooZPaymentAPI",
                       CURLOPT_RETURNTRANSFER => true,
                       CURLOPT_ENCODING => "",
                       CURLOPT_MAXREDIRS => 10,
                       //CURLOPT_TIMEOUT => 30,
                       CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                       CURLOPT_CUSTOMREQUEST => "POST",
                       CURLOPT_POSTFIELDS => json_encode($data),
                       CURLOPT_HTTPHEADER => array(
                           "cache-control: no-cache",
                           "content-type: application/json",
                           // "postman-token: 6aef6e9a-5c06-252a-a159-b568c629d2a1",
                           "programid: XXXXXXXXXXX",
                           "programkey: XXXXXXXXXX",
                           "zoozresponsetype: JSon"
                       ),
                   ));


           $response = curl_exec($curl);
           $err = curl_error($curl);
           curl_close($curl);
           if ($err) {
               echo "cURL Error #:" . $err;
           } else {
               $zoozTokenArr=json_decode($response);
               $paymentDetails=[];
               if(!$zoozTokenArr->responseStatus){
                   $paymentMethodTokenArr=$this->zoozAddPayment($meta,$zoozTokenArr->responseObject->paymentToken);
                   $paymentDetails['token']=$zoozTokenArr->responseObject->paymentToken;
                   $paymentDetails['methodToken']=$paymentMethodTokenArr;
                   return($paymentDetails);
               }
           }
       }
    private function zoozAddPayment($cardData,$token){
        $session = $this->request->session();
           $payment= [
            "command"=> "addPaymentMethod",
            "paymentToken"=> $token,
            "email"=> "ankur@89itworld.com",
           // "email"=> "eean.bradley@gmail.com",
            "paymentMethod"=> [
            "paymentMethodType"=> "CreditCard",
            "paymentMethodDetails"=>[
                "cardHolderName"=> "Test",
            "expirationDate"=>"10/2019",
            "cardNumber"=>"4580458045804580",
            "cvvNumber"=>"123",
            "userIdNumber"=>"123456789"
            ],
            "configuration"=> ["rememberPaymentMethod"=> true]
            ] ];
           $curl = curl_init();
           curl_setopt_array($curl, array(
                              CURLOPT_URL => "https://sandbox.zooz.com/mobile/ZooZPaymentAPI",
                              CURLOPT_RETURNTRANSFER => true,
                              CURLOPT_ENCODING => "",
                              CURLOPT_MAXREDIRS => 10,
                              CURLOPT_TIMEOUT => 30,
                              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                              CURLOPT_CUSTOMREQUEST => "POST",
                              CURLOPT_POSTFIELDS => json_encode($payment),
                              CURLOPT_HTTPHEADER => array(
                                  "cache-control: no-cache",
                                  "content-type: application/json",
                                  // "postman-token: 6aef6e9a-5c06-252a-a159-b568c629d2a1",
                                  "programid: XXXXXXXXXXXX",
                           "programkey: XXXXXXXXXXXXX",
                                  "zoozresponsetype: JSon"
                              ),
                          ));


                  $response = curl_exec($curl);
                  $err = curl_error($curl);

                  curl_close($curl);

                  if ($err) {
                      echo "cURL Error #:" . $err;
                  } else {
                      $zoozPayment=json_decode($response);
                      return($zoozPayment);
                  }
                  die;
       }
    public function saveBooking(){
       // pr($this->request->data); die;
        $session = $this->request->session();
        $userId=$session->read('flight_userid');
        $zoozMeta=['amount'=>$this->request->data['amount'],'card_number'=>$this->request->data['card_number'],'card_name'=>$this->request->data['card_name'],'date'=>$this->request->data['ex_month']."/".$this->request->data['ex_year'],'ccv'=>$this->request->data['ccv'],'email'=>$this->request->data['email']];
        // $this->autoRender = false;
        // $this->viewBuilder()->layout('ajax');
         $this->viewBuilder()->layout('booking_page');
         if ($this->request->is(['post'])) {
             $url_link='https://booking-api.skypicker.com//api/v0.1/save_booking?v=2';
             $url_link.='&visitor_uniqid='.md5($userId);
             $req_arr=array();
             $req_arr["lang"]="en";
             $req_arr["bags"]=0;
             $req_arr["currency"]="usd";
             $req_arr["booking_token"]=$this->request->data['booking_token'];
             $req_arr["affily"]="picky";
             $req_arr["booked_at"]="picky";
             $req_arr["user_id"]="test";
             $req_arr["secret_token"]="test";
             $req_arr["locale"]="en";
             $req_arr["immediate_confirmation"]=false;
             foreach ($this->request->data["passengers"] as $key=>$item) {
                // $req_arr["passengers"][$key]["name"]=$item['name'];
                 $req_arr["passengers"][$key]["name"]="test";
                // $req_arr["passengers"][$key]["surname"]=$item['surname'];
                 $req_arr["passengers"][$key]["surname"]="test";
                 $req_arr["passengers"][$key]["title"]=$item['title'];
                 $req_arr["passengers"][$key]["nationality"]=$item['nationality'];
                 $req_arr["passengers"][$key]["cardno"]=$item['cardno'];
                 $req_arr["passengers"][$key]["email"]=$this->request->data['email'];
                 $req_arr["passengers"][$key]["phone"]=$this->request->data['phone'];
                 $req_arr["passengers"][$key]["birthday"]=strtotime($item['dob']);
                 $req_arr["passengers"][$key]["expiration"] = strtotime($item['passport_on']);
             }
             //pr($req_arr);
             $data=json_encode($req_arr);
             $curl = curl_init();
             curl_setopt_array($curl, array(
              CURLOPT_URL => $url_link,
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $data,
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "cache-control: no-cache",
                "content-type: application/json"
              ),
             ));
             $response = curl_exec($curl);
             $err = curl_error($curl);
             curl_close($curl);
             $data=array();
             if ($err) {
              $data["result"]="cURL Error #:" . $err;
             } else {
                 $data["result"]=json_decode($response);
                 $zooz=$this->zoozPaymentToken($zoozMeta);
                 $data["zooz"]=$zooz;
                // pr($data);
             }

             $data["email"]=$this->request->data['email'];
             $data["phone"]=$this->request->data['phone'];
             $confirmPayment=$this->confirmPayment($data["result"]->transaction_id,$data['result']->booking_id);
             $this->set("flights_details",$data);
             //$view->set(compact('some', 'vars'));
             $this->render('save_booking');
         }
     }

    function confirmPayment($transactionId=null,$bookingId=null)
    {
        $this->viewBuilder()->layout('booking_page');
        $session = $this->request->session();
        $userId = $session->read('flight_userid');
        $url_link = 'https://booking-api.skypicker.com//api/v0.1/confirm_payment?v=2';
        //$url_link.='&visitor_uniqid='.$userId;
        $req_arr = array();
        $req_arr["transaction_id"] = $transactionId;
        $req_arr["booking_id"] = $bookingId;
        $data = json_encode($req_arr);
        $curl = curl_init();
        curl_setopt_array($curl, array(
            CURLOPT_URL => $url_link,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS => $data,
            CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "cache-control: no-cache",
                "content-type: application/json"
            ),
        ));
        $response = curl_exec($curl);
        $err = curl_error($curl);
        curl_close($curl);
        if ($err) {
            echo "cURL Error #:" . $err;
        } else {
           // echo "<pre>" . $response;
            return $response;

        }

    }




}
