<?php
namespace App\Controller;

use Cake\Core\Configure;
use Cake\Network\Exception\NotFoundException;
use Cake\ORM\TableRegistry;
use Cake\I18n\Time;
use Cake\View\Exception\MissingTemplateException;
use Cake\Database\Schema\Table;
/**
 * Created by 89ITWORLD.
 * User: Mahipal Singh
 * Date: 28-01-2016
 * Time: 12:55
 * To change this template use File | Settings | File Templates.
 */
use Cake\Event\Event;

class HotelsController extends AppController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->Auth->allow(['index', 'filter','listView','view','hotelDetails','available','booking']);
    }

    /**
     * hotels home page
     */

    public function index()
    {
        $this->viewBuilder()->layout('view_page');
        $session = $this->request->session();

        if ($this->request->is(['post'])) {

            $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
            $charactersLength = strlen($characters);
            $userid = '';
            for ($i = 0; $i < 20; $i++) {
                $userid .= $characters[rand(0, $charactersLength - 1)];
            }
            $session->write('userid', $userid);
            $session->write('search_detail', $this->request->data);

            $hotelPriceTable = TableRegistry::get('HotelPrices');
            $city = $this->request->data['destination'];
            $state = "";
            $country = "";

            $arrival =  date('m/d/Y', strtotime($this->request->data['date_from']));
            $departure =  date('m/d/Y', strtotime($this->request->data['date_to']));
            $adults = $this->request->data['adults'];
            $kids = $this->request->data['kids'];

            $path = "ean-services/rs/hotel/v3/list";
            $restul = 150;
            $xml = "%3CHotelListRequest%3E%20%3Ccity%3E" . $city . "%3C/city%3E%20%3CstateProvinceCode%3E" . $state . "%3C/stateProvinceCode%3E%0A%20%3CcountryCode%3E" . $country . "%3C/countryCode%3E%0A%20%3CarrivalDate%3E" . $arrival . "%3C/arrivalDate%3E%0A%20%3CdepartureDate%3E" . $departure . "%3C/departureDate%3E%0A%20%3CRoomGroup%3E%0A%20%3CRoom%3E%0A%20%3CnumberOfAdults%3E" . $adults . "%3C/numberOfAdults%3E%0A%20%3CnumberOfChildren%3E" . $kids . "%3C/numberOfChildren%3E%0A%20%3C/Room%3E%0A%20%3C/RoomGroup%3E%0A%20%3CnumberOfResults%3E" . $restul . "%3C/numberOfResults%3E%0A%20%3C/HotelListRequest%3E";

            $this->loadComponent('Ean');
            $data= $this->Ean->getCurlData($path,$xml);
            $dataArray = json_decode($data, true);

            if (@$dataArray['HotelListResponse']['EanWsError']) {
                $this->set('error', @$dataArray['HotelListResponse']['EanWsError']['presentationMessage']);
            } else {
                $hotels_datails = $dataArray['HotelListResponse']['HotelList']['HotelSummary'];

                foreach ($hotels_datails as $hotel) {
                  //  pr($hotel);
                    $hotels = $this->Hotels->newEntity();
                    $hotelData['userId'] = $userid;
                    $hotelData['name'] = $hotel['name'];
                    $hotelData['expedia_hotel_id'] = $hotel['hotelId'];
                    $hotelData['hotel_link'] = $hotel['deepLink'];
                    $hotelData['hotelRating'] = $hotel['hotelRating'];
                    $hotelData['description'] = strip_tags(html_entity_decode($hotel['shortDescription']));

                    $hotelData['review'] = (@$hotel['hotelRating']) ? $hotel['hotelRating'] : '0';
                    $hotelData['total_review'] = (@$hotel['tripAdvisorReviewCount']) ? $hotel['tripAdvisorReviewCount'] : '0';
                    $hotelData['image_url'] = (@$hotel['thumbNailUrl']) ? "https://exp.cdn-hotels.com" . str_replace('t.', 'l.', $hotel['thumbNailUrl']) : 'no image';

                    $freeFeature = @$hotel['RoomRateDetailsList']['RoomRateDetails']['ValueAdds']['ValueAdd'];

                    if($freeFeature){
                        $hotelData['valueAdds'] = json_encode($freeFeature);
                    }

                    $match = array('Hotel', 'Motel', 'Hostel', 'Homestay', 'Apartments', 'Apartment');
                    $matchFound = 'Hotel';
                    foreach ($match as $temp) {
                        if (stripos($hotelData['description'], $temp) !== false) {
                            $matchFound = $temp;
                            break;
                        }
                        if (stripos($hotelData['name'], $temp) !== false) {
                            $matchFound = $temp;
                            break;
                        }
                    }
                    $hotelData['type'] = $matchFound;
                    $hotelData['street'] = $hotel['address1'];
                    $hotelData['address2'] = (@$hotel['address2'])?$hotel['address2']:'';
                    $hotelData['city'] = $hotel['city'];
                    $hotelData['state'] = "";
                    $hotelData['country'] = $hotel['countryCode'];
                    $hotelData['postalCode'] = (@$hotel['postalCode'])?$hotel['postalCode']:'';
                    $hotelData['lat'] = $hotel['latitude'];
                    $hotelData['lang'] = $hotel['longitude'];
                    $hotelData['roomAbaility'] = @$hotel['RoomRateDetailsList']['RoomRateDetails']['RateInfos']['RateInfo']['currentAllotment'];
                    $hotelData['freeCancellation'] = (@$hotel['RoomRateDetailsList']['RoomRateDetails']['RateInfos']['RateInfo']['nonRefundable'] == "true")?"false":"true";
                    $hotelData['promoDescription'] = @$hotel['RoomRateDetailsList']['RoomRateDetails']['RateInfos']['RateInfo']['promoDescription'];

                    $hotels = $this->Hotels->patchEntity($hotels, $hotelData, ['validate' => false]);
                    if ($this->Hotels->save($hotels)) {
                        $hotel_id = $hotels['id'];

                        /*  Hotels Prices Data Insert  */
                        $hotelPrices = $hotelPriceTable->newEntity();
                        $hotelPrice['hotel_id'] = $hotel_id;
                        $hotelPrice['base_price'] = @$hotel['lowRate'];
                        $hotelPrice['total_price'] = @$hotel['highRate'];
                        $hotelPrice['currency'] = @$hotel['rateCurrencyCode'];

                        $hotelPrices = $hotelPriceTable->patchEntity($hotelPrices, $hotelPrice, ['validate' => false]);
////                         debug($hotelPrices); die;
                        if ($hotelPriceTable->save($hotelPrices)) {
                        }
                    }
                }
              return $this->redirect(['controller' => 'hotels', 'action' => 'index']);
            }
        }
        $this->set("search_detail", $session->read('search_detail'));
        $this->paginate = [
            'limit' => 15
        ];

        $this->set('hotel_data', $this->paginate($this->Hotels->find()->contain(['HotelPrices'])->where(['userId' =>$session->read('userid')])));
    }

    /*
     * Edited By yasar
     * Date of modify:27-Apr-2016
     * */
    public function filter()
    {
        $session = $this->request->session();
        $this->autoRender = false;
        $this->viewBuilder()->layout('ajax');
        $this->paginate = [
            'limit' => 50
        ];

        if ($this->request->is(['post'])) {
            $rating = @$this->request->data['star_rating'];
            $type = @$this->request->data['type_hotel'];
            $condition = ['userId' => $session->read('userid')];
            if (@$this->request->data['minPrice']) {
                $minPrice = str_replace('$', '', $this->request->data['minPrice']);
                $maxPrice = str_replace('$', '', $this->request->data['maxPrice']);

                array_push($condition, array('AND' => ['HotelPrices.base_price >=' => $minPrice], 'AND' => ['HotelPrices.base_price <=' => $maxPrice]));
            }
            if ($rating) {
                $n = sizeof($rating);
                if ($n > 1) {
                    $min = min($rating);
                    $max = max($rating);

                    array_push($condition, array('AND' => ['review >=' => $min], 'AND' => ['review <=' => $max]));
                } else {
                    array_push($condition, array('AND' => ['review <=' => $rating[0]]));
                }
            }
            if ($type) {
                array_push($condition, array('AND' => ['type IN' => $type]));

            }
            $this->set('hotel_data', $this->paginate($this->Hotels->find()->contain(['HotelPrices'])->where($condition)->order(['HotelPrices.base_price' => 'DESC'])));
            // $this->set(compact('hotel_data'));

            if ($this->request->is('ajax')) {
                if(@$this->request->data['layout']){
                    echo $this->render('/Element/Front/travelo_hotel_list');
                }else{
                    echo $this->render('/Element/Front/hotel_list');
                }

            }
        }
        exit;
    }

    /*
     * @param $hotel_id
     * */
    public function hotelDetails($hotel_id=null){
        $this->viewBuilder()->layout('view_page');
        $session = $this->request->session();
        if(empty($session->check('userid'))){
            $this->redirect(['controller'=>'Homes','action'=>'index']);
        }else{

        $path = "ean-services/rs/hotel/v3/info";
        $xml = "%3CHotelInformationRequest%3E%0A%20%20%20%20%3ChotelId%3E". $hotel_id . "%3C%2FhotelId%3E%0A%20%20%20%20%3Coptions%3E0%3C%2Foptions%3E%0A%3C%2FHotelInformationRequest%3E";

        $this->loadComponent('Ean');
        $data= $this->Ean->getCurlData($path,$xml);
        $dataArray = json_decode($data, true);
        $this->set('hotelDetails',$dataArray['HotelInformationResponse']);

        $hotel = $this->Hotels->find('all', ['limit' => 4])->contain(['HotelPrices'])->where(['Hotels.userId'=>$session->read('userid'),'Hotels.expedia_hotel_id !='=>$hotel_id]);
        $this->set('hotels',$this->Hotels->find()->contain(['HotelPrices'])->where(['Hotels.expedia_hotel_id'=>$hotel_id])->first());
         $this->set('hotel_list', $hotel);
        }
    }

    public function available(){
        $this->autoRender = false;
        $this->viewBuilder()->layout('ajax');
        $session = $this->request->session();

        if ($this->request->is(['post'])) {

        $path =  "ean-services/rs/hotel/v3/avail";
        $arrival =  date('m/d/Y', strtotime($session->read('search_detail')['date_from']));
        $departure =  date('m/d/Y', strtotime($session->read('search_detail')['date_to']));
        $adults= $session->read('search_detail')['adults'];

        $xml = "%3CHotelRoomAvailabilityRequest%3E%0A%3ChotelId%3E".$this->request->data['id']."%3C%2FhotelId%3E%0A%3CarrivalDate%3E". $arrival ."%3C%2FarrivalDate%3E%0A%3CdepartureDate%3E".$departure ."%3C%2FdepartureDate%3E%0A%3CincludeDetails%3Etrue%3C%2FincludeDetails%3E%0A%3CRoomGroup%3E%0A%3CRoom%3E%0A%3CnumberOfAdults%3E".$adults."%3C%2FnumberOfAdults%3E%0A%3C%2FRoom%3E%0A%3C%2FRoomGroup%3E%0A%3C%2FHotelRoomAvailabilityRequest%3E";

        $this->loadComponent('Ean');
        $data= $this->Ean->getCurlData($path,$xml);
        $this->set('hotelAvailability', json_decode($data, true));
        $this->set("search_detail", $session->read('search_detail'));

//          pr(json_decode($data, true)); die;
            if ($this->request->is('ajax')) {
                echo $this->render('/Element/travelo/hotel_availability');
            }
        }
        exit;
      }

    /*
     * @param $supplier_type null
     * @param $hotel_id null
     * @param $room_key null
     * */

    public function booking($supplier_type= null,$room_key = null, $hotel_id=null){
        $this->viewBuilder()->layout('view_page');
        $session = $this->request->session();

        if(empty($session->check('userid'))){
            $this->redirect(['controller'=>'Homes','action'=>'index']);
        }else{
        $path =  "ean-services/rs/hotel/v3/paymentInfo";
        $xml = "%3CHotelPaymentRequest%3E%0A%20%3ChotelId%3E".$hotel_id
        ."%3C%2FhotelId%3E%0A%20%3CsupplierType%3E".$supplier_type."%3C%2FsupplierType%3E%0A%20%3CrateType%3EMerchantStandard%3C%2FrateType%3E%0A%3C%2FHotelPaymentRequest%3E";

        $this->loadComponent('Ean');
        $data= $this->Ean->getCurlData($path,$xml);
         $card = json_decode($data, true);
         $cardType['']= "Select Card Type";

        foreach($card['HotelPaymentResponse']['PaymentType'] as $cType){
            $cardType[$cType['code']] = $cType['name'];
        }
        $this->set(compact('cardType'));
        $countryTable = TableRegistry::get('Countries');
        $this->set('country', $countryTable->find('list')->toArray());

        $path =  "ean-services/rs/hotel/v3/avail";
        $arrival =  date('m/d/Y', strtotime($session->read('search_detail')['date_from']));
        $departure =  date('m/d/Y', strtotime($session->read('search_detail')['date_to']));
        $adults = $session->read('search_detail')['adults'];

        $xml = "%3CHotelRoomAvailabilityRequest%3E%0A%3ChotelId%3E".$hotel_id."%3C%2FhotelId%3E%0A%3CarrivalDate%3E". $arrival ."%3C%2FarrivalDate%3E%0A%3CdepartureDate%3E".$departure ."%3C%2FdepartureDate%3E%0A%3CincludeDetails%3Etrue%3C%2FincludeDetails%3E%0A%3CRoomGroup%3E%0A%3CRoom%3E%0A%3CnumberOfAdults%3E".$adults."%3C%2FnumberOfAdults%3E%0A%3C%2FRoom%3E%0A%3C%2FRoomGroup%3E%0A%3C%2FHotelRoomAvailabilityRequest%3E";

        $data= $this->Ean->getCurlData($path,$xml);
        $dataArray = json_decode($data, true);

        if($dataArray['HotelRoomAvailabilityResponse']['@size']<=1){
            $details[0] = $dataArray['HotelRoomAvailabilityResponse']['HotelRoomResponse'];
        }else{
            $details = $dataArray['HotelRoomAvailabilityResponse']['HotelRoomResponse'];
        }

        foreach($details as $key => $hotelDetails){
            if($key == $room_key){
                $this->set(compact('hotelDetails'));
            }
        }
        $this->set('hotel',$this->Hotels->find()->where(['Hotels.expedia_hotel_id'=>$hotel_id])->first());
        $this->set("search_detail", $session->read('search_detail'));

        if($this->request->is(['post'])){

            $bookingPath = "ean-services/rs/hotel/v3/res";

            $xml = "%3CHotelRoomReservationRequest%3E%0A%20%3ChotelId%3E". $hotel_id ."%3C%2FhotelId%3E%0A%20%3CarrivalDate%3E". $arrival ."%3C%2FarrivalDate%3E%0A%20%3CdepartureDate%3E". $departure ."%3C%2FdepartureDate%3E%0A%20%3CsupplierType%3E". $supplier_type ."%3C%2FsupplierType%3E%0A%20%3CrateKey%3E". $this->request->data['rateKey'] ."%3C%2FrateKey%3E%0A%20%3CroomTypeCode%3E". $this->request->data['roomCode'] ."%3C%2FroomTypeCode%3E%0A%20%3CrateCode%3E". $this->request->data['rateCode'] ."%3C%2FrateCode%3E%0A%20%3CchargeableRate%3E". $this->request->data['chargeableRate'] ."%3C%2FchargeableRate%3E%0A%20%3CRoomGroup%3E%0A%20%3CRoom%3E%0A%20%3CnumberOfAdults%3E". $adults ."%3C%2FnumberOfAdults%3E%0A%20%3CfirstName%3E". $this->request->data['fname'] ."%3C%2FfirstName%3E%0A%20%3ClastName%3E". $this->request->data['lname'] ."%3C%2FlastName%3E%0A%20%3CbedTypeId%3E". $this->request->data['bedType'] ."%3C%2FbedTypeId%3E%0A%20%3CsmokingPreference%3E". $this->request->data['smokingPreference'] ."%3C%2FsmokingPreference%3E%0A%20%3C%2FRoom%3E%0A%20%3C%2FRoomGroup%3E%0A%20%3CReservationInfo%3E%0A%20%3Cemail%3E". $this->request->data['email'] ."%3C%2Femail%3E%0A%20%3CfirstName%3E". $this->request->data['fname'] ."%3C%2FfirstName%3E%0A%20%3ClastName%3E". $this->request->data['lname']."%3C%2FlastName%3E%0A%20%3ChomePhone%3E". $this->request->data['phone'] ."%3C%2FhomePhone%3E%0A%20%3CworkPhone%3E".$this->request->data['phone'] ."%3C%2FworkPhone%3E%0A%20%3CcreditCardType%3E". $this->request->data['card_type']."%3C%2FcreditCardType%3E%0A%20%3CcreditCardNumber%3E". $this->request->data['c_number']."%3C%2FcreditCardNumber%3E%0A%20%3CcreditCardIdentifier%3E". $this->request->data['card_id'] ."%3C%2FcreditCardIdentifier%3E%0A%20%3CcreditCardExpirationMonth%3E". $this->request->data['month'] ."%3C%2FcreditCardExpirationMonth%3E%0A%20%3CcreditCardExpirationYear%3E". $this->request->data['year'] ."%3C%2FcreditCardExpirationYear%3E%0A%20%3C%2FReservationInfo%3E%0A%20%3CAddressInfo%3E%0A%20%3Caddress1%3E". @$this->request->data['address'] ."%3C%2Faddress1%3E%0A%20%3Ccity%3E". $this->request->data['city'] ."%3C%2Fcity%3E  %0A%20%3CstateProvinceCode%3E". @$this->request->data['state'] ."%3C%2FstateProvinceCode%3E%0A%20%3CcountryCode%3E". $this->request->data['country_code'] ."%3C%2FcountryCode%3E%0A%20%3CpostalCode%3E". $this->request->data['zip'] ."%3C%2FpostalCode%3E%0A%3C%2FAddressInfo%3E%0A%3C%2FHotelRoomReservationRequest%3E";

            $data= $this->Ean->getCurlData($bookingPath,$xml);
            $dataArray = json_decode($data, true);
            if(!empty($dataArray)){

            }else{
                $this->set('error',"some error Occur!");
            }
            pr($dataArray); die;
        }
      }
    }

    public function listView(){
        $this->viewBuilder()->layout('view_page');
        $session = $this->request->session();
        $this->set('hotel_data', $this->paginate($this->Hotels->find()->contain(['HotelPrices'])->where(['userId' => $session->read('userid')])));
        $this->set("search_detail", $session->read('search_detail'));
    }

    public function getCity()
    {
        $city=TableRegistry::get('City');
        $user=$city->find();
        print_r($city);exit;
    }
}
